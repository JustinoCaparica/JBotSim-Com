%runs:5
%maxevolutions:1


--executor classname=taskexecutor.SequentialTaskExecutor
--executor classname=ConillonTaskExecutor
--executor classname=taskexecutor.ParallelTaskExecutor



%pop{
	--population
	 	classname=evolutionaryrobotics.populations.NEATPopulation,
		generations=500,
		size=100,
		samples=5
}


--environment
 	classname=simulation.environment.CooperativeNestForagingEnvironment,
	width=2.5,
	height=2.5,
	preysGathered=0,
	forageInRadius=1.0,
	forageOutRadius=1.3,
	nestRadius=0.25,
	numberofpreys=1,
	capturedPreyReborn=1,
	taskName=TaskSimSteady,
	steps=1500


--evolution classname=evolutionaryrobotics.evolution.NEATEvolution

--evaluation classname=evolutionaryrobotics.evaluationfunctions.TaskSimSteadyEvaluationFunction




#SoleForager-noRole-taskSimEval{

	%pop

	--robots
	 	classname=simulation.robot.DifferentialDriveRobot,
		distancewheels=0.052,
		diameter=0.074,
		messenger=none,
		numberofrobots=4,
		sensors=(
			RobotSensor_1=(
				classname=simulation.robot.sensors.RobotSensor,
				range=1.5,
				numbersensors=8,
				angle=45,
				id=1
			),
			PreySensor_2=(
				classname=simulation.robot.sensors.PreySensor,
				range=1.5,
				numbersensors=8,
				angle=45,
				id=2
			),
			NestSensor_3=(
				classname=simulation.robot.sensors.NestSensor,
				range=1.5,
				numbersensors=8,
				angle=45,
				id=3
			)
		),
		actuators=(
			TwoWheelActuator_1=(
				classname=simulation.robot.actuators.TwoWheelActuator,
				id=1
			),
			PreyPickerActuator_2=(
				classname=simulation.robot.actuators.PreyPickerActuator,
				stoprobot=0,
				id=2
			)
		)

	--controllers
	 	classname=evolutionaryrobotics.neuralnetworks.NeuralNetworkController,
		network=(
			classname=evolutionaryrobotics.evolution.neat.NEATNeuralNetwork,
			inputs=(
				RobotNNInput=(
					classname=evolutionaryrobotics.neuralnetworks.inputs.SensorNNInput,
					id=1
				),
				PreyNNInput=(
					classname=evolutionaryrobotics.neuralnetworks.inputs.SensorNNInput,
					id=2
				),
				NestNNInput=(
					classname=evolutionaryrobotics.neuralnetworks.inputs.SensorNNInput,
					id=3
				)
			),
			outputs=(
				TwoWheelNNOutput=(
					classname=evolutionaryrobotics.neuralnetworks.outputs.TwoWheelNNOutput,
					id=1
				),
				PreyPickerNNOutput=(
					classname=evolutionaryrobotics.neuralnetworks.inputs.PreyPickerNNOutput,
					id=2
				),
			)
		)
}






