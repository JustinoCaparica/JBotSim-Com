--output garbage

--robots
 	classname=simulation.robot.DifferentialDriveRobot,
	useMessenger=1,
	numberofrobots=2,
	sensors=(
		RecruitedSensor_1=(
			classname=simulation.robot.sensors.RecruitedSensor,
			id=1
		),
		PreySensor_2=(
			classname=simulation.robot.sensors.PreySensor,
			id=2
		),
		RecruiterSensor_3=(
			classname=simulation.robot.sensors.RecruiterSensor,
			id=3
		),
		NearRobotSensor_4=(
			classname=simulation.robot.sensors.NearRobotSensor,
			id=4
		),
		FocusingOnSensor_5=(
			classname=simulation.robot.sensors.FocusingOnSensor,
			id=5
		),
		FocusedBySensor_6=(
			classname=simulation.robot.sensors.FocusedBySensor,
			id=6
		)
	),
	actuators=(
		TwoWheelActuator_1=(
			classname=simulation.robot.actuators.TwoWheelActuator,
			id=1
		),
		RecruiterActuator_2=(
			classname=simulation.robot.actuators.RecruiterActuator,
			id=2
		),
		RecruitedActuator_3=(
			classname=simulation.robot.actuators.RecruitedActuator,
			id=3
		)
	)

--controllers
 	classname=evolutionaryrobotics.neuralnetworks.NeuralNetworkController,
	network=(
		classname=evolutionaryrobotics.neuralnetworks.CTRNNMultilayer,
		inputs=(
			RecruitedNNInput=(
				classname=evolutionaryrobotics.neuralnetworks.inputs.RecruitedNNInput,
				id=1
			),
			PreyNNInput=(
				classname=evolutionaryrobotics.neuralnetworks.inputs.SensorNNInput,
				id=2
			),
			RecruiterNNInput=(
				classname=evolutionaryrobotics.neuralnetworks.inputs.RecruiterNNInput,
				id=3
			),
			NearRobotNNInput=(
				classname=evolutionaryrobotics.neuralnetworks.inputs.SensorNNInput,
				id=4
			),
			FocusingOnNNInput=(
				classname=evolutionaryrobotics.neuralnetworks.inputs.FocusingOnNNInput,
				id=5
			),
			FocusedByNNInput=(
				classname=evolutionaryrobotics.neuralnetworks.inputs.FocusedByNNInput,
				id=6
			),
			
		),
		outputs=(
			TwoWheelNNOutput=(
				classname=evolutionaryrobotics.neuralnetworks.outputs.TwoWheelNNOutput,
				id=1
			),
			RecruiterNNOutput=(
				classname=evolutionaryrobotics.neuralnetworks.outputs.RecruiterNNOutput,
				id=2
			),
			RecruitedNNOutput=(
				classname=evolutionaryrobotics.neuralnetworks.outputs.RecruitedNNOutput,
				id=3
			),
			
		)
	)

--population classname=evolutionaryrobotics.populations.MuLambdaPopulation

--environment classname=simulation.environment.CooperativeForagingEnvironment

--executor classname=taskexecutor.ParallelTaskExecutor

--evolution classname=evolutionaryrobotics.evolution.GenerationalEvolution

--evaluation classname=evolutionaryrobotics.evaluationfunctions.CooperativeForagingEvaluationFunction

--random-seed 1

